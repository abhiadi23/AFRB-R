import random
import asyncio
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from datetime import datetime, timedelta
from helper.database import DARKXSIDE78
from config import *
from config import Config
from pyrogram import Client, filters
from pyrogram.types import Message
import aiohttp
from urllib.parse import quote
import string
import logging
import pytz
from functools import wraps

def check_ban_status(func):
    @wraps(func)
    async def wrapper(client, message, *args, **kwargs):
        user_id = message.from_user.id
        is_banned, ban_reason = await DARKXSIDE78.is_user_banned(user_id)
        if is_banned:
            await message.reply_text(
                f"**Y·¥è·¥ú ·¥Ä Ä·¥á  ô·¥Ä…¥…¥·¥á·¥Ö “ì Ä·¥è·¥ç ·¥ús…™…¥…¢ ·¥õ ú…™s  ô·¥è·¥õ.**\n\n**R·¥á·¥Äs·¥è…¥:** {ban_reason}"
            )
            return
        return await func(client, message, *args, **kwargs)
    return wrapper

@Client.on_message(filters.command("add_token") & filters.user(Config.ADMIN))
async def add_tokens(bot: Client, message: Message):
    try:
        _, amount, *user_info = message.text.split()
        user_ref = " ".join(user_info).strip()
        
        if user_ref.startswith("@"):
            user = await DARKXSIDE78.col.find_one({"username": user_ref[1:]})
        else:
            user = await DARKXSIDE78.col.find_one({"_id": int(user_ref)})
        
        if not user:
            return await message.reply_text("**Us·¥á Ä …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö!**")
        
        new_tokens = int(amount) + user.get('token', 69)
        await DARKXSIDE78.col.update_one(
            {"_id": user['_id']},
            {"$set": {"token": new_tokens}}
        )
        await message.reply_text(f"üó∏ A·¥Ö·¥Ö·¥á·¥Ö {amount} ·¥õ·¥è·¥ã·¥á…¥s ·¥õ·¥è ·¥ús·¥á Ä {user['_id']}. N·¥á·¥°  ô·¥Ä ü·¥Ä…¥·¥Ñ·¥á: {new_tokens}")
    except Exception as e:
        await message.reply_text(f"E Ä Ä·¥è Ä: {e}\nUs·¥Ä…¢·¥á: /add_token <amount> @username/userid")

@Client.on_message(filters.command("remove_token") & filters.user(Config.ADMIN))
async def remove_tokens(bot: Client, message: Message):
    try:
        _, amount, *user_info = message.text.split()
        user_ref = " ".join(user_info).strip()
        
        if user_ref.startswith("@"):
            user = await DARKXSIDE78.col.find_one({"username": user_ref[1:]})
        else:
            user = await DARKXSIDE78.col.find_one({"_id": int(user_ref)})
        
        if not user:
            return await message.reply_text("**Us·¥á Ä …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö!**")
        
        new_tokens = max(0, user.get('token', Config.DEFAULT_TOKEN) - int(amount))
        await DARKXSIDE78.col.update_one(
            {"_id": user['_id']},
            {"$set": {"token": new_tokens}}
        )
        await message.reply_text(f"**‚úò R·¥á·¥ç·¥è·¥†·¥á·¥Ö {amount} ·¥õ·¥è·¥ã·¥á…¥s “ì Ä·¥è·¥ç ·¥ús·¥á Ä {user['_id']}. N·¥á·¥°  ô·¥Ä ü·¥Ä…¥·¥Ñ·¥á: {new_tokens}**")
    except Exception as e:
        await message.reply_text(f"E Ä Ä·¥è Ä: {e}\nUs·¥Ä…¢·¥á: /remove_token <amount> @username/userid")

@Client.on_message(filters.command("add_premium") & filters.user(Config.ADMIN))
async def add_premium(bot: Client, message: Message):
    try:
        cmd, user_ref, duration = message.text.split(maxsplit=2)
        duration = duration.lower()
        
        if user_ref.startswith("@"):
            user = await DARKXSIDE78.col.find_one({"username": user_ref[1:]})
        else:
            user = await DARKXSIDE78.col.find_one({"_id": int(user_ref)})
        
        if not user:
            return await message.reply_text("**Us·¥á Ä …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö!**")
        
        if duration == "lifetime":
            expiry = datetime(9999, 12, 31)
        else:
            num, unit = duration[:-1], duration[-1]
            unit_map = {
                'h': 'hours',
                'd': 'days',
                'm': 'months',
                'y': 'years'
            }
            delta = timedelta(**{unit_map[unit]: int(num)})
            expiry = datetime.now() + delta
        
        await DARKXSIDE78.col.update_one(
            {"_id": user['_id']},
            {"$set": {
                "is_premium": True,
                "premium_expiry": expiry
            }}
        )
        await message.reply_text(f"**üó∏ P Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥ú…¥·¥õ…™ ü {expiry}**")
    except Exception as e:
        await message.reply_text(f"E Ä Ä·¥è Ä: {e}\nUs·¥Ä…¢·¥á: /add_premium @username/userid ")

@Client.on_message(filters.command("remove_premium") & filters.user(Config.ADMIN))
async def remove_premium(bot: Client, message: Message):
    try:
        _, user_ref = message.text.split(maxsplit=1)
        
        if user_ref.startswith("@"):
            user = await DARKXSIDE78.col.find_one({"username": user_ref[1:]})
        else:
            user = await DARKXSIDE78.col.find_one({"_id": int(user_ref)})
        
        if not user:
            return await message.reply_text("**Us·¥á Ä …¥·¥è·¥õ “ì·¥è·¥ú…¥·¥Ö!**")
        
        await DARKXSIDE78.col.update_one(
            {"_id": user['_id']},
            {"$set": {
                "is_premium": False,
                "premium_expiry": None
            }}
        )
        await message.reply_text("**‚úò P Ä·¥á·¥ç…™·¥ú·¥ç ·¥Ä·¥Ñ·¥Ñ·¥áss  Ä·¥á·¥ç·¥è·¥†·¥á·¥Ö**")
    except Exception as e:
        await message.reply_text(f"E Ä Ä·¥è Ä: {e}\nUs·¥Ä…¢·¥á: /remove_premium @username/userid")

@Client.on_message(filters.private & filters.command(["token", "mytokens", "bal"]))
async def check_tokens(client, message: Message):
    user_id = message.from_user.id
    user_data = await DARKXSIDE78.col.find_one({"_id": user_id})
    
    if not user_data:
        return await message.reply_text("**E Ä Ä·¥è Ä: DARK**")
    
    is_premium = user_data.get("is_premium", False)
    premium_expiry = user_data.get("premium_expiry")

    if is_premium and premium_expiry:
        if datetime.now() > premium_expiry:
            is_premium = False
            await DARKXSIDE78.col.update_one(
                {"_id": user_id},
                {"$set": {"is_premium": False, "premium_expiry": None}}
            )

    token_count = user_data.get("token", Config.DEFAULT_TOKEN)
    msg = [
        "**Y·¥è·¥ú Ä A·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ S·¥õ·¥Ä·¥õ·¥ús**",
        "",
        f"**P Ä·¥á·¥ç…™·¥ú·¥ç S·¥õ·¥Ä·¥õ·¥ús:** {'üó∏ A·¥Ñ·¥õ…™·¥†·¥á' if is_premium else '‚úò I…¥·¥Ä·¥Ñ·¥õ…™·¥†·¥á'}"
    ]
    
    if is_premium and premium_expiry:
        msg.append(f"**P Ä·¥á·¥ç…™·¥ú·¥ç Ex·¥ò…™ Ä è:** {premium_expiry.strftime('%d %b %Y %H:%M')}")
    else:
        msg.extend([
            f"**A·¥†·¥Ä…™ ü·¥Ä ô ü·¥á T·¥è·¥ã·¥á…¥s:** {token_count}",
            "",
            "**1 ·¥õ·¥è·¥ã·¥á…¥ = 1 “ì…™ ü·¥á  Ä·¥á…¥·¥Ä·¥ç·¥á**",
            ""
        ])
    
    buttons = []
    if not is_premium:
        buttons = InlineKeyboardMarkup([
            [InlineKeyboardButton("G·¥á…¥·¥á Ä·¥Ä·¥õ·¥á M·¥è Ä·¥á T·¥è·¥ã·¥á…¥s", callback_data="gen_tokens")],
            [InlineKeyboardButton("G·¥á·¥õ P Ä·¥á·¥ç…™·¥ú·¥ç", callback_data="premium_info")]
        ])
    else:
        buttons = InlineKeyboardMarkup([
            [InlineKeyboardButton("R·¥á“ì Ä·¥ás ú S·¥õ·¥Ä·¥õ·¥ús", callback_data="refresh_tokens")]
        ])
    
    await message.reply_text(
        "\n".join(msg),
        reply_markup=buttons,
        disable_web_page_preview=True
    )


@Client.on_callback_query(filters.regex(r"^(gen_tokens|premium_info|refresh_tokens)$"))
async def token_buttons_handler(client, query: CallbackQuery):
    data = query.data
    user_id = query.from_user.id
    user_data = await DARKXSIDE78.col.find_one({"_id": user_id})
    
    if data == "gen_tokens":
        await query.message.edit_text(
            "**Y·¥è·¥ú ·¥Ñ·¥Ä…¥ …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á ·¥õ·¥è·¥ã·¥á…¥s ·¥ús…™…¥…¢ /gentoken** üîó",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("S·¥ú·¥ò·¥ò·¥è Ä·¥õ", url=f"https://t.me/{Config.SUPPORT_CHANNEL_USERNAME}")],
                [InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã", callback_data="token_back")]
            ]),
            disable_web_page_preview=True
        )
    
    elif data == "premium_info":
        await query.message.edit_text(
            Txt.PREMIUM_TXT,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("S·¥ú·¥ò·¥ò·¥è Ä·¥õ", url=f"https://t.me/{Config.SUPPORT_CHANNEL_USERNAME}")],
                [InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã", callback_data="token_back")]
            ]),
            disable_web_page_preview=True
        )
    
    elif data == "refresh_tokens":
        await check_tokens(client, query.message)
        await query.answer("Status refreshed!")
    
    elif data == "token_back":
        await check_tokens(client, query.message)


logging.basicConfig(level=logging.INFO)

@Client.on_message(filters.command("gentoken") & filters.private)
@check_ban_status
async def generate_token(client: Client, message: Message):
    user_id = message.from_user.id
    db = DARKXSIDE78
    
    token_id = "".join(random.choices(string.ascii_uppercase + string.digits, k=Config.TOKEN_ID_LENGTH))
    
    deep_link = f"https://t.me/{Config.BOT_USERNAME}?start={token_id}"
    
    short_url = await shorten_url(deep_link)
    
    if not short_url:
        return await message.reply("**F·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á ·¥õ·¥è·¥ã·¥á…¥  ü…™…¥·¥ã. P ü·¥á·¥Äs·¥á ·¥õ Ä è  ü·¥Ä·¥õ·¥á Ä.**")
    
    await db.create_token_link(user_id, token_id, Config.SHORTENER_TOKEN_GEN)
    
    await message.reply(
        f"**G·¥á·¥õ 100 T·¥è·¥ã·¥á…¥s**\n\n"
        f"**C ü…™·¥Ñ·¥ã  ô·¥á ü·¥è·¥°  ü…™…¥·¥ã ·¥Ä…¥·¥Ö ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥:**\n{short_url}\n\n"
        "**L…™…¥·¥ã ·¥†·¥Ä ü…™·¥Ö “ì·¥è Ä 24  ú·¥è·¥ú Äs | O…¥·¥á-·¥õ…™·¥ç·¥á ·¥ús·¥á ·¥è…¥ ü è**",
        disable_web_page_preview=True
    )

async def handle_token_redemption(client: Client, message: Message, token_id: str):
    user_id = message.from_user.id
    
    try:
        token_data = await DARKXSIDE78.get_token_link(token_id)
        
        if not token_data:
            return await message.reply("**I…¥·¥†·¥Ä ü…™·¥Ö ·¥è Ä ·¥áx·¥ò…™ Ä·¥á·¥Ö ·¥õ·¥è·¥ã·¥á…¥  ü…™…¥·¥ã...**")
        
        if token_data['used']:
            return await message.reply("**T ú…™s  ü…™…¥·¥ã  ú·¥Äs ·¥Ä ü Ä·¥á·¥Ä·¥Ö è  ô·¥á·¥á…¥ ·¥ús·¥á·¥Ö...**")
        
        expiry_utc = token_data['expiry'].replace(tzinfo=pytz.UTC)
        
        if datetime.now(pytz.UTC) > expiry_utc:
            return await message.reply("T·¥è·¥ã·¥á…¥ ·¥áx·¥ò…™ Ä·¥á·¥Ö...")
        
        if token_data['user_id'] != user_id:
            return await message.reply("**T ú…™s ·¥õ·¥è·¥ã·¥á…¥  ü…™…¥·¥ã  ô·¥á ü·¥è…¥…¢s ·¥õ·¥è ·¥Ä…¥·¥è·¥õ ú·¥á Ä ·¥ús·¥á Ä...**")
        
        await DARKXSIDE78.col.update_one(
            {"_id": user_id},
            {"$inc": {"token": token_data['tokens']}}
        )
        
        await DARKXSIDE78.mark_token_used(token_id)
        
        await message.reply(f"S·¥ú·¥Ñ·¥Ñ·¥áss! {token_data['tokens']} ·¥õ·¥è·¥ã·¥á…¥s ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è  è·¥è·¥ú Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ!")
    
    except Exception as e:
        logging.error(f"Error during token redemption: {e}")
        await message.reply("**A…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥° ú…™ ü·¥á ·¥ò Ä·¥è·¥Ñ·¥áss…™…¥…¢  è·¥è·¥ú Ä  Ä·¥á«´·¥ú·¥ás·¥õ. P ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.**")

@Client.on_message(filters.private & filters.command("start"))
@check_ban_status
async def start(client, message: Message):
    if len(message.command) > 1:
        token_id = message.command[1]
        await handle_token_redemption(client, message, token_id)
        return
    
    user = message.from_user
    await DARKXSIDE78.add_user(client, message)

    m = await message.reply_text("·¥è…¥·¥á·¥á-·¥Ñ ú·¥Ä…¥!,  ú·¥è·¥° ·¥Ä Ä·¥á  è·¥è·¥ú \n·¥°·¥Ä…™·¥õ ·¥Ä ·¥ç·¥è·¥ç·¥á…¥·¥õ. . .")
    await asyncio.sleep(0.4)
    await m.edit_text("üéä")
    await asyncio.sleep(0.5)
    await m.edit_text("‚ö°")
    await asyncio.sleep(0.5)
    await m.edit_text("Íú±·¥õ·¥Ä Ä·¥õ…™…¥…¢...")
    await asyncio.sleep(0.4)
    await m.delete()

    await message.reply_sticker(Config.START_STICKER)

    buttons = InlineKeyboardMarkup([
        [
            InlineKeyboardButton('·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás', url=f'https://t.me/{Config.BOT_CHANNEL_USERNAME}'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', url=f'https://t.me/{Config.SUPPORT_CHANNEL_USERNAME}')
        ],
        [
            InlineKeyboardButton('·¥Ä ô·¥è·¥ú·¥õ', callback_data='about'),
            InlineKeyboardButton('·¥ò Ä·¥á·¥ç…™·¥ú·¥ç', callback_data='premiumx')
        ],
        [
            InlineKeyboardButton("·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös", callback_data='help')
        ]
    ])

    if Config.START_PIC:
        await message.reply_photo(
            Config.START_PIC,
            caption=Txt.START_TXT.format(user.mention),
            reply_markup=buttons
        )
    else:
        await message.reply_text(
            text=Txt.START_TXT.format(user.mention),
            reply_markup=buttons,
            disable_web_page_preview=True
        )

async def shorten_url(deep_link: str) -> str:
    api_url = f"{Config.SHORTENER_URL}?api={Config.TOKEN_API}&url={quote(deep_link)}&format=text"
    try:
        async with aiohttp.ClientSession() as session:
            max_retries = 3
            for attempt in range(max_retries):
                async with session.get(api_url, ssl=True) as response:
                    if response.status == 200:
                        return (await response.text()).strip()
                    logging.error(f"API Error: {response.status}")
                await asyncio.sleep(2 ** attempt)
    except Exception as e:
        logging.error(f"Connection Error: {e}")
    logging.warning("Shorten URL API failed. Using original deep link.")
    return deep_link

@Client.on_callback_query()
async def cb_handler(client, query: CallbackQuery):
    data = query.data
    user_id = query.from_user.id

    print(f"Callback data received: {data}")

    if data == "home":
        await query.message.edit_text(
            text=Txt.START_TXT.format(query.from_user.mention),
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton('·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás', url=f'https://t.me/{Config.BOT_CHANNEL_USERNAME}'), InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ', url=f'https://t.me/{Config.SUPPORT_CHANNEL_USERNAME}')],
                [InlineKeyboardButton('·¥Ä ô·¥è·¥ú·¥õ', callback_data='about'), InlineKeyboardButton('·¥ò Ä·¥á·¥ç…™·¥ú·¥ç', callback_data='premiumx')],
                [InlineKeyboardButton("·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös", callback_data='help')]
            ])
        )
    elif data == "caption":
        await query.message.edit_text(
            text=Txt.CAPTION_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url=f'https://t.me/{Config.SUPPORT_CHANNEL_USERNAME}'), InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="help")]
            ])
        )

    elif data == "help":
        await query.message.edit_text(
            text=Txt.HELP_TXT.format(client.mention),
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("·¥Ä·¥ú·¥õ·¥è  Ä·¥á…¥·¥Ä·¥ç·¥á “ì·¥è Ä·¥ç·¥Ä·¥õ", callback_data='file_names')],
                [InlineKeyboardButton('·¥õ ú·¥ú·¥ç ô…¥·¥Ä…™ ü', callback_data='thumbnail'), InlineKeyboardButton('·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥', callback_data='caption')],
                [InlineKeyboardButton('·¥ç·¥á·¥õ·¥Ä·¥Ö·¥Ä·¥õ·¥Ä', callback_data='meta'), InlineKeyboardButton('·¥Ö·¥è…¥·¥Ä·¥õ·¥á', callback_data='donate')],
                [InlineKeyboardButton(' ú·¥è·¥ç·¥á', callback_data='home')]
            ])
        )

    elif data == "meta":
        await query.message.edit_text(
            text=Txt.SEND_METADATA,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close"), InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="help")]
            ])
        )
    elif data == "donate":
        await query.message.edit_text(
            text=Txt.DONATE_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton("·¥è·¥°…¥·¥á Ä", url=f'https://t.me/{Config.OWNER_USERNAME}')]
            ])
        )
    elif data == "file_names":
        format_template = await DARKXSIDE78.get_format_template(user_id)
        await query.message.edit_text(
            text=Txt.FILE_NAME_TXT.format(format_template=format_template),
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close"), InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="help")]
            ])
        )
    elif data == "thumbnail":
        await query.message.edit_caption(
            caption=Txt.THUMBNAIL_TXT,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close"), InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="help")]
            ])
        )
    elif data == "metadatax":
        await query.message.edit_caption(
            caption=Txt.SEND_METADATA,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close"), InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="help")]
            ])
        )
    elif data == "source":
        await query.message.edit_caption(
            caption=Txt.SOURCE_TXT,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close"), InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="home")]
            ])
        )
    elif data == "premiumx":
        await query.message.edit_caption(
            caption=Txt.PREMIUM_TXT,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton(" ô·¥ú è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç", url=f'https://t.me/{Config.OWNER_USERNAME}')]
            ])
        )
    elif data == "plans":
        await query.message.edit_caption(
            caption=Txt.PREPLANS_TXT,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close"), InlineKeyboardButton(" ô·¥ú è ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç", url=f'https://t.me/{Config.OWNER_USERNAME}')]
            ])
        )
    elif data == "about":
        await query.message.edit_text(
            text=Txt.ABOUT_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url=f'https://t.me/{Config.SUPPORT_CHANNEL_USERNAME}'), InlineKeyboardButton("·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös", callback_data="help")],
                [InlineKeyboardButton("·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä", url=f'https://t.me/{Config.DEVELOPER_USERNAME}'), InlineKeyboardButton("…¥·¥á·¥õ·¥°·¥è Ä·¥ã", url=f'https://t.me/{Config.BOT_CHANNEL_USERNAME}')],
                [InlineKeyboardButton(" ô·¥Ä·¥Ñ·¥ã", callback_data="home")]
            ])
        )
    elif data == "close":
        try:
            await query.message.delete()
            await query.message.reply_to_message.delete()
            await query.message.continue_propagation()
        except:
            await query.message.delete()
            await query.message.continue_propagation()

@Client.on_message(filters.command("donate"))
@check_ban_status
async def donation(client, message):
    buttons = InlineKeyboardMarkup([
        [InlineKeyboardButton(text=" ô·¥Ä·¥Ñ·¥ã", callback_data="help"), InlineKeyboardButton(text="·¥è·¥°…¥·¥á Ä", url=f'https://t.me/{Config.OWNER_USERNAME}')]
    ])
    yt = await message.reply_photo(photo='https://graph.org/file/1919fe077848bd0783d4c.jpg', caption=Txt.DONATE_TXT, reply_markup=buttons)
    await asyncio.sleep(300)
    await yt.delete()
    await message.delete()

# Premium Command Handler
@Client.on_message(filters.command("premium"))
@check_ban_status
async def getpremium(bot, message):
    buttons = InlineKeyboardMarkup([
        [InlineKeyboardButton("·¥è·¥°…¥·¥á Ä", url=f"https://t.me/{Config.OWNER_USERNAME}"), InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close")]
    ])
    yt = await message.reply_photo(photo='https://graph.org/file/feebef43bbdf76e796b1b.jpg', caption=Txt.PREMIUM_TXT, reply_markup=buttons)
    await asyncio.sleep(300)
    await yt.delete()
    await message.delete()

# Plan Command Handler
@Client.on_message(filters.command("plan"))
@check_ban_status
async def premium(bot, message):
    buttons = InlineKeyboardMarkup([
        [InlineKeyboardButton("s·¥á…¥·¥Ö ss", url=f"https://t.me/{Config.OWNER_USERNAME}"), InlineKeyboardButton("·¥Ñ ü·¥ès·¥á", callback_data="close")]
    ])
    yt = await message.reply_photo(photo='https://graph.org/file/8b50e21db819f296661b7.jpg', caption=Txt.PREPLANS_TXT, reply_markup=buttons)
    await asyncio.sleep(300)
    await yt.delete()
    await message.delete()

# Bought Command Handler
@Client.on_message(filters.command("bought") & filters.private)
@check_ban_status
async def bought(client, message):
    msg = await message.reply('W·¥Ä…™·¥õ ·¥Ñ ú·¥á·¥Ñ·¥ã…™…¥…¢...')
    replied = message.reply_to_message

    if not replied:
        await msg.edit("<b>Please reply with the screenshot of your payment for the premium purchase to proceed.\n\nFor example, first upload your screenshot, then reply to it using the '/bought' command</b>")
    elif replied.photo:
        await client.send_photo(
            chat_id=LOG_CHANNEL,
            photo=replied.photo.file_id,
            caption=f'<b>User - {message.from_user.mention}\nUser id - <code>{message.from_user.id}</code>\nUsername - <code>{message.from_user.username}</code>\nName - <code>{message.from_user.first_name}</code></b>',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("Close", callback_data="close_data")]
            ])
        )
        await msg.edit_text('<b>Y·¥è·¥ú Ä s·¥Ñ Ä·¥á·¥á…¥s ú·¥è·¥õ  ú·¥Äs  ô·¥á·¥á…¥ s·¥á…¥·¥õ ·¥õ·¥è A·¥Ö·¥ç…™…¥s</b>')

@Client.on_message(filters.private & filters.command("help"))
@check_ban_status
async def help_command(client, message):
    bot = await client.get_me()
    mention = bot.mention

    await message.reply_text(
        text=Txt.HELP_TXT.format(mention=mention),
        disable_web_page_preview=True,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("·¥Ä·¥ú·¥õ·¥è  Ä·¥á…¥·¥Ä·¥ç·¥á “ì·¥è Ä·¥ç·¥Ä·¥õ", callback_data='file_names')],
            [InlineKeyboardButton('·¥õ ú·¥ú·¥ç ô…¥·¥Ä…™ ü', callback_data='thumbnail'), InlineKeyboardButton('·¥Ñ·¥Ä·¥ò·¥õ…™·¥è…¥', callback_data='caption')],
            [InlineKeyboardButton('·¥ç·¥á·¥õ·¥Ä·¥Ö·¥Ä·¥õ·¥Ä', callback_data='meta'), InlineKeyboardButton('·¥Ö·¥è…¥·¥Ä·¥õ·¥á', callback_data='donate')],
            [InlineKeyboardButton(' ú·¥è·¥ç·¥á', callback_data='home')]
        ])
    )
